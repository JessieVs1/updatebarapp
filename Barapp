<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Bestel Beheer App</title>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>
  <style>
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #f9f9f9, #e3e3e3);
      display: flex;
      justify-content: center;
      align-items: flex-start;
      overflow-y: auto;
    }
    .container, .screen {
      background-color: #ffffff;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      padding: 40px;
      text-align: center;
      width: 100%;
      max-width: 400px;
    }
    h1, h2, h3, h4 {
      margin-bottom: 20px;
      font-size: 24px;
      color: #333;
    }
    .btn {
      display: block;
      width: 100%;
      margin: 10px 0;
      padding: 15px;
      font-size: 16px;
      border: none;
      border-radius: 8px;
      background-color: #4CAF50;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .btn:hover {
      background-color: #45a049;
    }
    input[type="text"], input[type="number"] {
      padding: 10px;
      width: 80%;
      margin: 10px 0;
      border-radius: 6px;
      border: 1px solid #ccc;
    }
    .hidden { display: none; }
    .product, .cart-item {
      margin: 10px 0;
      text-align: left;
    }
    .remove-btn {
      color: red;
      margin-left: 10px;
      cursor: pointer;
    }
    .add-btn {
      background-color: #007bff;
      border-radius: 6px;
      padding: 10px;
      width: auto;
      margin-top: 5px;
    }
    .add-btn:hover {
      background-color: #0069d9;
    }
    #backToTopBtn {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 10px 15px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      display: none;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
    }
    #backToTopBtn:hover {
      background-color: #45a049;
    }
    @media (max-width: 500px) {
      .container, .screen {
        padding: 20px;
        max-width: 95%;
      }
      h1, h2, h3 {
        font-size: 20px;
      }
      .btn {
        padding: 12px;
        font-size: 14px;
      }
    }
  </style>
</head>
<body style="min-height: 100vh;">
  <div class="container" id="app" style="overflow-y: auto; max-height: none;"></div>
  <button id="backToTopBtn" onclick="window.scrollTo({ top: 0, behavior: 'smooth' });">⬆️ Boven</button>
  <script>
    const supabase = window.supabase.createClient(
      'https://nsevcinmxmaplnpyctht.supabase.co',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5zZXZjaW5teG1hcGxucHljdGh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYyOTkxOTAsImV4cCI6MjA2MTg3NTE5MH0.-GrwWMhWxXXZM2zL3S_Zat7GhpvbgEBzBGpKzhy-rcU'
    );

    let cart = [];

    function renderStartScreen() {
      document.getElementById('app').innerHTML = `
        <h1>Welkom</h1>
        <button class="btn" onclick="promptUserCode()">Bestellen</button>
        <button class="btn" onclick="promptAdminCode()">Beheer</button>
      `;
    }

    function promptUserCode() {
      const code = prompt("Voer je gebruikerscode in:");
      if (code) checkUserCode(code);
    }

    async function checkUserCode(code) {
      const { data } = await supabase.from('users').select('*').eq('code', code).single();
      if (data) loadOrderScreen(code);
      else alert("Ongeldige gebruikerscode");
    }

    function promptAdminCode() {
      const code = prompt("Voer de beheercode in:");
      if (code === 'BHV123') loadAdminScreen();
      else alert("Ongeldige beheercode");
    }

    async function loadOrderScreen(userCode) {
      const { data: products } = await supabase.from('products').select('*');
      document.getElementById('app').innerHTML = `
        <h2>Bestellen</h2>
        <div>${products.map(p => `
          <div class="product">
            <b>${p.name}</b> - €${p.price} (Voorraad: ${p.stock})<br>
            <button class="btn add-btn" onclick="addToCart('${p.name}', ${p.price}, ${p.id}, '${userCode}')">➕ Voeg toe</button>
          </div>`).join('')}</div>
        <h3>Winkelwagen</h3>
        <div id="cart"></div>
        <button class="btn" onclick="placeOrder('${userCode}')">Bevestig bestelling</button>
        <button class="btn" onclick="renderStartScreen()">Terug</button>
      `;
      showCart();
    }

    function addToCart(name, price, productId, userCode) {
      const existing = cart.find(item => item.name === name);
      if (existing) existing.quantity++;
      else cart.push({ name, price, productId, quantity: 1 });
      showCart();
    }

    function showCart() {
      const div = document.getElementById('cart');
      if (!div) return;
      div.innerHTML = cart.map((item, index) =>
        `${item.name} x ${item.quantity} = €${item.price * item.quantity} <span class="remove-btn" onclick="removeFromCart(${index})">✖</span>`
      ).join('<br>');
    }

    function removeFromCart(index) {
      cart.splice(index, 1);
      showCart();
    }

    async function placeOrder(userCode) {
      for (const item of cart) {
        const { data: product } = await supabase.from('products').select('*').eq('id', item.productId).single();
        if (!product || product.stock < item.quantity) {
          alert(`Onvoldoende voorraad voor ${item.name}`);
          return;
        }
        await supabase.from('products').update({ stock: product.stock - item.quantity }).eq('id', item.productId);
        await supabase.from('orders').insert({ name: item.name, quantity: item.quantity, price: item.price, user_code: userCode });
      }
      alert("Bestelling geplaatst!");
      cart = [];
      renderStartScreen();
    }

    function loadAdminScreen() {
      document.getElementById('app').innerHTML = `
        <h2>Beheer</h2>
        <button class="btn" onclick="showUserManagement()">Gebruikersbeheer</button>
        <button class="btn" onclick="showProductManagement()">Voorraadbeheer</button>
        <button class="btn" onclick="showOrderHistory()">Bestelgeschiedenis</button>
        <button class="btn" onclick="renderStartScreen()">Terug</button>
        <div id="userManagementSection" class="hidden"></div>
        <div id="productManagementSection" class="hidden"></div>
        <div id="orderHistorySection" class="hidden"></div>
      `;
    }

    function toggleSection(sectionId) {
      const sections = ['userManagementSection', 'productManagementSection', 'orderHistorySection'];
      sections.forEach(id => {
        const section = document.getElementById(id);
        if (section) section.classList.add('hidden');
      });
      const target = document.getElementById(sectionId);
      if (target) target.classList.toggle('hidden');
    }

    async function showUserManagement() {
      toggleSection('userManagementSection');
      const div = document.getElementById('userManagementSection');
      if (div.classList.contains('hidden')) return;
      const { data: users } = await supabase.from('users').select('*');
      div.innerHTML = '<h3>Gebruikers</h3>' + users.map(u => `${u.name} (${u.code}) <button onclick="deleteUser(${u.id})">Verwijder</button>`).join('<br>') + `
        <h4>Nieuwe gebruiker</h4>
        <input id="newUserName" placeholder="Naam"><br>
        <input id="newUserCode" placeholder="Code"><br>
        <button class="btn" onclick="addUser()">Toevoegen</button>`;
    }

    async function showProductManagement() {
      toggleSection('productManagementSection');
      const div = document.getElementById('productManagementSection');
      if (div.classList.contains('hidden')) return;
      const { data: products } = await supabase.from('products').select('*');
      div.innerHTML = '<h3>Producten</h3>' + products.map(p => `
        ${p.name} (Voorraad: ${p.stock})<br>
        <input type="number" id="stock-${p.id}" value="${p.stock}" style="width:60px"> <button onclick="updateStock(${p.id})">Update voorraad</button><br><br>
      `).join('') + `
        <h4>Nieuw product</h4>
        <input id="newProductName" placeholder="Naam"><br>
        <input id="newProductPrice" type="number" placeholder="Prijs"><br>
        <input id="newProductStock" type="number" placeholder="Voorraad"><br>
        <button class="btn" onclick="addProduct()">Toevoegen</button>`;
    }

    async function showOrderHistory() {
      toggleSection('orderHistorySection');
      const div = document.getElementById('orderHistorySection');
      if (div.classList.contains('hidden')) return;
      const { data: orders } = await supabase.from('orders').select('*');
      const { data: users } = await supabase.from('users').select('*');
      if (!orders || !users) return;
      const userMap = Object.fromEntries(users.map(u => [u.code, u.name]));
      const grouped = orders.reduce((acc, cur) => {
        if (!acc[cur.user_code]) acc[cur.user_code] = [];
        acc[cur.user_code].push(cur);
        return acc;
      }, {});
      div.innerHTML = '<h3>Bestelgeschiedenis</h3>' + Object.entries(grouped).map(([code, orders]) => {
        const totaal = orders.reduce((sum, o) => sum + o.price * o.quantity, 0);
        const lijst = orders.map(o => `${o.name} x ${o.quantity} = €${o.price * o.quantity}`).join('<br>');
        return `<b>${userMap[code] || 'Onbekend'} (${code})</b><br>${lijst}<br><b>Totaal: €${totaal}</b><hr>`;
      }).join('') + `<button class="btn" onclick="confirmClearOrders()">Verwijder alles</button>`;
    }

    async function deleteUser(id) {
      await supabase.from('users').delete().eq('id', id);
      showUserManagement();
    }

    async function addUser() {
      const name = document.getElementById('newUserName').value;
      const code = document.getElementById('newUserCode').value;
      await supabase.from('users').insert({ name, code });
      showUserManagement();
    }

    async function updateStock(id) {
      const stock = parseInt(document.getElementById(`stock-${id}`).value);
      await supabase.from('products').update({ stock }).eq('id', id);
      showProductManagement();
    }

    async function addProduct() {
      const name = document.getElementById('newProductName').value;
      const price = parseFloat(document.getElementById('newProductPrice').value);
      const stock = parseInt(document.getElementById('newProductStock').value);
      await supabase.from('products').insert({ name, price, stock });
      showProductManagement();
    }

    async function confirmClearOrders() {
      if (confirm("Weet je zeker dat je alle bestellingen wilt verwijderen?")) {
        await supabase.from('orders').delete().neq('id', 0);
        showOrderHistory();
      }
    }

    renderStartScreen();

    window.onscroll = function() {
      const btn = document.getElementById("backToTopBtn");
      if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) {
        btn.style.display = "block";
      } else {
        btn.style.display = "none";
      }
    };
  </script>
</body>
</html>
